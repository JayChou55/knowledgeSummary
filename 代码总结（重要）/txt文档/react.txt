1.循环
	<script type="text/babel">
        var names =['1','2','3']
        let vDom =(
            <ul>
                {
                    names.map(function(name,index){
                    return <li>{name}</li>
                    })
                }

            }
            </ul>
        );
        ReactDOM.render(vDom,document.getElementById("example1"))
        ReactDOM.render(<ul>{names.map(name =><li>{name}</li>)}</ul>)
    </script>

refs
	    /*
    1. 组件的3大属性之二: refs属性
      1). 组件内的标签都可以定义ref属性来标识自己
      2). 在组件中可以通过this.refs.refName来得到对应的真实DOM对象
      3). 作用: 用于操作指定的ref属性的dom元素对象(表单标签居多)
        * <input ref='username'>
        * this.refs.username //返回input对象
    2. 事件处理
      1). 通过onXxx属性指定组件的事件处理函数(注意大小写)
        * React使用的是自定义(合成)事件, 而不是使用的DOM事件
        * React中的事件是通过委托方式处理的(委托给组件最外层的元素)
      2). 通过event.target得到发生事件的DOM元素对象
        <input onFocus={this.handleClick}/>
        handleFocus(event) {
          event.target  //返回input对象
        }
    3. 强烈注意
      1). 组件内置的方法中的this为组件对象
      2). 在组件中自定义的方法中的this为null
        * 强制绑定this
        * 箭头函数(ES6模块化编码时才能使用)
    4. 问题: 如何给一个函数强制指定内部的this?
    */

    /*
    需求: 自定义组件, 功能说明如下:
      1. 界面如果页面所示
      2. 点击按钮, 提示第一个输入框中的值
      3. 当第2个输入框失去焦点时, 提示这个输入框中的值
    */
    class RefsTest extends React.Component {
      constructor (props) {
       super(props);

        this.showMsg = this.showMsg.bind(this); // 强制给showMsg()绑定this(组件对象)，或者在 <button onClick={this.showMsg.bind(this)}>提示输入数据</button>
        this.handleBlur = this.handleBlur.bind(this);
      }

      showMsg() {
        // console.log(this); //this默认是null, 而不组件对象
        const input = this.refs.msg;
        alert(input.value);
      }

      handleBlur(event) {
        const input = event.target;
        alert(input.value);
      }

      render () {
        return (
          <div>
            <input type="text" ref="msg"/>
            <button onClick={this.showMsg}>提示输入数据</button>
            <input type="text" placeholder="失去焦点提示数据" onBlur={this.handleBlur}/>
          </div>
        );
      }
    }

    ReactDOM.render(<RefsTest/>, document.getElementById('example'));
  </script>
  
  ====================state=========================================================
  <script type="text/babel">
  /*
  组件3大属性之: state属性
    1). 组件被称为"状态机", 通过更新组件的状态值来更新对应的页面显示(重新渲染)
    2). 初始化状态:
      constructor (props) {
        super(props);
        this.state = {
          stateProp1 : value1,
          stateProp2 : value2
        };
      }
    3). 读取某个状态值
      this.state.statePropertyName
    4). 更新状态---->组件界面更新
      this.setState({
        stateProp1 : value1,
        stateProp2 : value2
      })
    5). 问题: 请区别一下组件的props和state属性?
  */

  /*
  需求: 自定义组件, 功能说明如下
    1. 显示h2标题, 初始文本为: 你喜欢我
    2. 点击标题更新为: 我喜欢你
  */
  class LikeMe extends React.Component {
    constructor(props) {
      super(props);
      this.state = {
        isLikeMe: false
      };
      this.switchLikeMe = this.switchLikeMe.bind(this);
    }

    switchLikeMe() {
      let isLikeMe = !this.state.isLikeMe;
      this.setState({isLikeMe})
    }

    render() {
      let text = this.state.isLikeMe ? '你喜欢我' : '我喜欢你';
      return <h2 onClick={this.switchLikeMe}>{text}</h2>;
    }
  }

  ReactDOM.render(<LikeMe/>, document.getElementById('example'));
</script>