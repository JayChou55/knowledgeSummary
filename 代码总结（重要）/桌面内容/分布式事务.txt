A：原子性
C：一致性
I：隔离性
D：持久性

本地事务：由资源管理器（如dbms）本地管理。在单个数据库的本地并且限制在单个进程内的事务，本地事务不涉及多个数据来源
全局事务：（DTP模型）事务由全局事务管理器全局管理；事务管理器管事务状态与参与的资源协调资源一致提交回滚；TX协议：应用或者应用服务器与事务管理器的接口；XA协议：全局事务管理器与资源管理器的接口。
			AP:也就是应用程序，可以理解为使用dtp的程序
			RM：资源管理器，应用程序通过资源管理器对资源进行控制，资源必须实现XA定义的接口与
			TM：事务管理器吗，负责协调和管理事务，提供给AP应用程序编程接口以及管理资源管理器。
			事务管理器控制着全局事务，管理事务生命周期，并且协调资源。资源管理器负责控制和管理实际资源。
XA规范（XA分布式性能非常低）
两阶段提交：是XA用于在全局事务中协调多个资源的机制
TM和RM采取两阶段提交方案来解决一致性问题
两阶段提交需要TM来控制所有RM节点的操作结果并且指引这些节点是否需要最终提交。

JAVAEE平台中的事务实现：
	JTA：Java Transaction API
	JTS：Java Transaction Service,JTA事务管理器实现标准，向上支持JTA，向下通过CORBA OTS 实现跨事务域的互操作性。
	EJB：基于组件的应用编程模型，通过声明事务管理进一步的简化事务应用编程。

优点：严格的ACID
缺点：效率非常低。全局事务，数据被LOCK时间跨整个事务，直到全局事务结束。XA协议系统开销大。

BASE理论
	原子性A 持久性D必须根本保障。为了可用性，性能与降级服务的需要，只有降低一致性C与隔离性I的要求。

CAP定理：分布式系统，最多满足2个 一致性C（所用用户看到的数据一致），可用性A（总能找到一个可用的数据复本），分区容错性（容忍网络中断）。	
分布式系统中，最重要满足业务需求，而不是追求抽象，绝对的系统特性。 

柔性事务中的服务模式

柔性事务解决方案：1.可靠消息最终一致。
				  2.TCC（两阶段型、补偿型）
				  3.最大努力通知（非可靠消息，定期校对）
				  
刚性事务：1.全局事务（标准的分布式事务）

消息中间件主要作用：异步通讯、解耦、并发缓冲		
消息一致性：业务成功了，就保证消息一定往外投，只有主动方，消息中间件，不包含被动方	

消息发送一致性异常处理：1.查询状态为"待确认"的消息对应业务的操作结果。
						2.返回业务处理结果（成功/失败）
						3.根据业务结果处理消息，对消息中间件中的消息存储内容，失败：删除对应信息不发送。成功：更新消息状态为"待发送"，然后执行消息投递
						
现成的MQ中间件产品不支持消息发送一致性流程（先进存储，再被确认后才能发送的两步式流程）。	

可靠消息一致性方案：1.本地消息服务方案					
					2.独立消息服务方案