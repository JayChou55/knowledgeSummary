  /**
         * @ function：合并指定表格列（表格id为table_id）指定列（列数为table_colnum）的相同文本的相邻单元格
         * @ param：table_id 为需要进行合并单元格的表格的id。如在HTMl中指定表格 id="data" ，此参数应为 #data
         * @ param：table_colnum 为需要合并单元格的所在列。为数字，从最左边第一列为1开始算起。
         */
        function table_rowspan(table_id, table_colnum) {
            table_firsttd = "";
            table_currenttd = "";
            table_SpanNum = 0;
            table_Obj = $(table_id + " tr td:nth-child(" + table_colnum + ")");

            table_Obj.each(function (i) {
                if (i == 0) {
                    table_firsttd = $(this);
                    table_SpanNum = 1;
                } else {
                    table_currenttd = $(this);
                    if (table_firsttd.text() == table_currenttd.text()) { //这边注意不是val（）属性，而是text（）属性
                        //td内容为空的不合并
                        if(table_firsttd.text() !=""){
                            table_SpanNum++;
                            table_currenttd.hide(); //remove();
                            table_firsttd.attr("rowSpan", table_SpanNum);
                        }
                    } else {
                        table_firsttd = $(this);
                        table_SpanNum = 1;
                    }
                }
            });
        }


		/*
		 * @ function：合并指定表格行（表格id为table_id）指定行（行数为table_rownum）的相同文本的相邻单元格
		 * @ param：table_id 为需要进行合并单元格的表格id。如在HTMl中指定表格 id="data" ，此参数应为 #data
		 * @ param：table_rownum 为需要合并单元格的所在行。其参数形式请参考jquery中nth-child的参数。
		 如果为数字，则从最左边第一行为1开始算起。
		 "even" 表示偶数行
		 "odd" 表示奇数行
		 "3n+1" 表示的行数为1、4、7、10.......
		 * @ param：table_maxcolnum 为指定行中单元格对应的最大列数，列数大于这个数值的单元格将不进行比较合并。
		 此参数可以为空，为空则指定行的所有单元格要进行比较合并。
		 */
        function table_colspan(table_id, table_rownum, table_maxcolnum) {
            if (table_maxcolnum == void 0) { table_maxcolnum = 0; }
            table_firsttd = "";
            table_currenttd = "";
            table_SpanNum = 0;
            $(table_id + " tr:nth-child(" + table_rownum + ")").each(function (i) {
                table_Obj = $(this).children();
                table_Obj.each(function (i) {
                    if (i == 0) {
                        table_firsttd = $(this);
                        table_SpanNum = 1;
                    } else if ((table_maxcolnum > 0) && (i > table_maxcolnum)) {
                        return "";
                    } else {
                        table_currenttd = $(this);
                        if (table_firsttd.text() == table_currenttd.text()) {
                            //td内容为空的不合并
                            if (table_firsttd.text() !="") {
                                table_SpanNum++;
                                table_currenttd.hide(); //remove();
                                table_firsttd.attr("colSpan", table_SpanNum);
                                table_firsttd.attr("style", "text-align:center");
                            }
                        } else {
                            table_firsttd = $(this);
                            table_SpanNum = 1;
                        }
                    }
                });
            });
        }
		==================================建表====================================================
CREATE TABLE T_BZ_EXCEL_DATA 
(
  ID VARCHAR2(40 BYTE) 
, DATA1 VARCHAR2(2000 BYTE) 
, DATA2 VARCHAR2(2000 BYTE) 
, DATA3 VARCHAR2(2000 BYTE) 
, DATA4 VARCHAR2(2000 BYTE) 
, DATA5 VARCHAR2(2000 BYTE) 
, DATA6 VARCHAR2(2000 BYTE) 
, DATA7 VARCHAR2(2000 BYTE) 
, DATA8 VARCHAR2(2000 BYTE) 
, DATA9 VARCHAR2(2000 BYTE) 
, DATA10 VARCHAR2(2000 BYTE) 
, DATA11 VARCHAR2(2000 BYTE) 
, DATA12 VARCHAR2(2000 BYTE) 
, DATA13 VARCHAR2(2000 BYTE) 
, DATA14 VARCHAR2(2000 BYTE) 
, DATA15 VARCHAR2(2000 BYTE) 
, DATA16 VARCHAR2(2000 BYTE) 
, DATA17 VARCHAR2(2000 BYTE) 
, DATA18 VARCHAR2(2000 BYTE) 
, DATA19 VARCHAR2(2000 BYTE) 
, DATA20 VARCHAR2(2000 BYTE) 
, CREATE_BY VARCHAR2(40 BYTE) 
, UPDATE_BY VARCHAR2(40 BYTE) 
, CREATE_DATE DATE 
, UPDATE_DATE DATE 
, DEL_FLAG VARCHAR2(20 BYTE) DEFAULT '0' 
, REMARKS VARCHAR2(2000 BYTE) 
, EXCEL_TEMPLATE_ID VARCHAR2(40) 
) 
LOGGING 
TABLESPACE JSCIQATV 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) NOCOMPRESS;

COMMENT ON COLUMN T_BZ_EXCEL_DATA.EXCEL_TEMPLATE_ID IS '模板ID';


		
		create type tabletype is table of varchar2(3000);
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		===========================================================
		 ;(function($) {
            $.fn.tablesMergeCell = function(options) {
                debugger;
                var defaultsettings= {
                    automatic:true,
                    cols: null,        // 用数组表示列的索引,从0开始,然后根据指定列来处理(合并)相同内容单元格
                    rows: null
                };
                var opts = $.extend(defaultsettings, options);
                return this.each(function() {
                    var cols = opts.cols,
                        rows = opts.rows;
                    if(rows==null){
                        for ( var i = cols.length - 1; cols[i] != undefined; i--) {
                            tablesMergeCell($(this), cols[i]);
                        }
                    }else{
                        for ( var i = cols.length - 1,k=opts.rows.length-1; cols[i] != undefined; i--,k--) {
                            tablesMergeCell($(this), cols[i],k);
                        }
                    }

                    dispose($(this));
                });

                // 如果对javascript的closure和scope概念比较清楚, 这是个插件内部使用的private方法
                function tablesMergeCell($table, colIndex,rowIndex) {
                    $table.data('col-content', '');     // 存放单元格内容
                    $table.data('col-rowspan', 1);      // 存放计算的rowspan值 默认为1
                    $table.data('col-td', $());         // 存放发现的第一个与前一行比较结果不同td(jQuery封装过的), 默认一个"空"的jquery对象
                    $table.data('trNum', $('tbody tr', $table).length);     // 要处理表格的总行数, 用于最后一行做特殊处理时进行判断之用
                    // 我们对每一行数据进行"扫面"处理 关键是定位col-td, 和其对应的rowspan
                    $('tbody tr', $table).each(function(index) {
                        var $tr = $(this);
                        // td:eq中的colIndex即列索引
                        var $td = $('td:eq(' + colIndex + ')', $tr);
                        var currentContent = $td.html();
                        if(opts.automatic){     // 内容
                            // 第一次时走此分支
                            if ($table.data('col-content') == '') {
                                $table.data('col-content', currentContent);
                                $table.data('col-td', $td);
                            } else {
                                // 上一行与当前行内容相同
                                if ($table.data('col-content') == currentContent) {
                                    addRowspan();   // 上一行与当前行内容相同则col-rowspan累加, 保存新值
                                }else{
                                    newRowspan();   // 上一行与当前行内容不同
                                }
                            }
                        }else{      // 指定
                            if(opts.rows.length>0){
                                if(opts.rows[0].length==undefined){
                                    for(var i=0; i<opts.rows.length; i++){
                                        customRowspan(opts.rows[i],opts.rows.length);
                                    }
                                }else{
                                    for(var i=0; i<opts.rows[rowIndex].length; i++){
                                        customRowspan(opts.rows[rowIndex][i],opts.rows[rowIndex].length);
                                    }
                                }
                            }
                        }
                        function customRowspan(val,len){
                            if(index==val){
                                if ($table.data('col-content') == '') {
                                    if(currentContent==''){
                                        currentContent = true;
                                    }
                                    $table.data('col-content', currentContent);
                                    $td.attr('rowspan', len);
                                }else{
                                    $td.hide();
                                }
                            }
                        }
                        function addRowspan(){
                            var rowspan = $table.data('col-rowspan') + 1;
                            $table.data('col-rowspan', rowspan);
                            // 值得注意的是 如果用了$td.remove()就会对其他列的处理造成影响
                            $td.hide();
                            // 最后一行的情况比较特殊一点
                            // 比如最后2行 td中的内容是一样的, 那么到最后一行就应该把此时的col-td里保存的td设置rowspan
                            if (++index == $table.data('trNum')) {
                                $table.data('col-td').attr('rowspan', $table.data('col-rowspan'));
                            }
                        }
                        function newRowspan(){
                            // col-rowspan默认为1, 如果统计出的col-rowspan没有变化, 不处理
                            if ($table.data('col-rowspan') != 1) {
                                $table.data('col-td').attr('rowspan', $table.data('col-rowspan'));
                            }
                            // 保存第一次出现不同内容的td, 和其内容, 重置col-rowspan
                            $table.data('col-td', $td);
                            $table.data('col-content', $td.html());
                            $table.data('col-rowspan', 1);
                        }
                    });
                }
                // 同样是个private函数 清理内存之用
                function dispose($table) {
                    $table.removeData();
                }
            };

        })(jQuery);
		
		
		
		
		================================================
		select ec.name
from 
T_BZ_EXCEL_TEMPLATE et ,
T_BZ_EXCEL_CONFIGURE ec
where et.ability_id='1878dc043d974bc6ad1c93ab562a118d'
and ec.template_id=et.id
order by to_number(ec.order_number) asc;
select split('1,2,3,4,5,6',',') from T_BZ_EXCEL_CONFIGURE;

select student,
sum(decode(subject,'语文', grade,null)) "语文",
sum(decode(subject,'数学', grade,null)) "数学",
sum(decode(subject,'英语', grade,null)) "英语"
from table
group by student;


create type tabletype is table of varchar2(3000);


select * from table(split('Hello\Cnblogs!','\'));


select SPLITSTR(ec.name,'1','\') as aa,
decode(SPLITSTR(ec.name,'2','\'),'',SPLITSTR(ec.name,'1','\'),SPLITSTR(ec.name,'2','\')) as bb,
decode(SPLITSTR(ec.name,'3','\'),'',decode(SPLITSTR(ec.name,'2','\'),'',SPLITSTR(ec.name,'1','\'),SPLITSTR(ec.name,'2','\')),SPLITSTR(ec.name,'3','\')) as cc
from 
T_BZ_EXCEL_TEMPLATE et ,
T_BZ_EXCEL_CONFIGURE ec
where et.ability_id='1878dc043d974bc6ad1c93ab562a118d'
and ec.template_id=et.id
order by to_number(ec.order_number) asc;


ALTER TABLE T_BZ_EXCEL_DATA 
ADD (ORDER_NUM VARCHAR2(200) );

COMMENT ON COLUMN T_BZ_EXCEL_DATA.ORDER_NUM IS '排序字段';

