	==================jdbc连接=====================
	加入spring-boot-starter-jdbc依赖
	<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
	引入mysql连接类和连接池：
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<scope>runtime</scope>
	</dependency>

	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>druid</artifactId>
		<version>1.0.29</version>
	</dependency>
	========开启=====
	<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
		
		
		
	package com.forezp.dao.impl;

import com.forezp.dao.IAccountDAO;
import com.forezp.entity.Account;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * Created by fangzhipeng on 2017/4/20.
 */
@Repository
public class AccountDaoImpl implements IAccountDAO {

    @Autowired
    private JdbcTemplate jdbcTemplate;
    @Override
    public int add(Account account) {
        return jdbcTemplate.update("insert into account(name, money) values(?, ?)",
              account.getName(),account.getMoney());

    }

    @Override
    public int update(Account account) {
        return jdbcTemplate.update("UPDATE  account SET NAME=? ,money=? WHERE id=?",
                account.getName(),account.getMoney(),account.getId());
    }

    @Override
    public int delete(int id) {
        return jdbcTemplate.update("DELETE from TABLE account where id=?",id);
    }

    @Override
    public Account findAccountById(int id) {
        List<Account> list = jdbcTemplate.query("select * from account where id = ?", new Object[]{id}, new BeanPropertyRowMapper(Account.class));
        if(list!=null && list.size()>0){
            Account account = list.get(0);
            return account;
        }else{
            return null;
        }
    }

    @Override
    public List<Account> findAccountList() {
        List<Account> list = jdbcTemplate.query("select * from account", new Object[]{}, new BeanPropertyRowMapper(Account.class));
        if(list!=null && list.size()>0){
            return list;
        }else{
            return null;
        }
    }
}



======================JPA==============================


JPA全称Java Persistence API.JPA通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。

JPA 的目标之一是制定一个可以由很多供应商实现的API，并且开发人员可以编码来实现该API，而不是使用私有供应商特有的API。

JPA是需要Provider来实现其功能的，Hibernate就是JPA Provider中很强的一个，应该说无人能出其右。从功能上来说，JPA就是Hibernate功能的一个子集。


<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa
            </artifactId>
        </dependency>

<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency> 

配置数据源：

spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8
    username: root
    password: 123456

  jpa:
    hibernate:
      ddl-auto: update  # 第一次简表create  后面用update
    show-sql: true		
		创建实体类

通过@Entity 表明是一个映射的实体类， @Id表明id， @GeneratedValue 字段自动生成

	@Entity
	public class Account {
		@Id
		@GeneratedValue
		private int id ;
		private String name ;
		private double money;

	...  省略getter setter
	}
	
	
	Dao层

	数据访问层，通过编写一个继承自 JpaRepository 的接口就能完成数据访问,其中包含了几本的单表查询的方法，非常的方便。值得注意的是，这个Account 对象名，而不是具体的表名，另外Interger是主键的类型，一般为Integer或者Long

	public interface AccountDao  extends JpaRepository<Account,Integer> {
	}
	
	
	@RestController
	@RequestMapping("/account")
	public class AccountController {

		@Autowired
		AccountDao accountDao;

		@RequestMapping(value = "/list", method = RequestMethod.GET)
		public List<Account> getAccounts() {
			return accountDao.findAll();
		}

		@RequestMapping(value = "/{id}", method = RequestMethod.GET)
		public Account getAccountById(@PathVariable("id") int id) {
			return accountDao.findOne(id);
		}

		@RequestMapping(value = "/{id}", method = RequestMethod.PUT)
		public String updateAccount(@PathVariable("id") int id, @RequestParam(value = "name", required = true) String name,
									@RequestParam(value = "money", required = true) double money) {
			Account account = new Account();
			account.setMoney(money);
			account.setName(name);
			account.setId(id);
			Account account1 = accountDao.saveAndFlush(account);

			return account1.toString();

		}

		@RequestMapping(value = "", method = RequestMethod.POST)
		public String postAccount(@RequestParam(value = "name") String name,
								  @RequestParam(value = "money") double money) {
			Account account = new Account();
			account.setMoney(money);
			account.setName(name);
			Account account1 = accountDao.save(account);
			return account1.toString();

		}


	}
	
	======================Mybatis注解式==============================
	
	    <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter<artifactId>
            <version>1.3.0</version>
        </dependency>
		
		
		<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.29</version>
        </dependency>
		
	application.properties配置文件中引入数据源：	
	spring.datasource.url=jdbc:mysql://localhost:3306/test
	spring.datasource.username=root
	spring.datasource.password=123456
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver



@Mapper
public interface AccountMapper {

    @Insert("insert into account(name, money) values(#{name}, #{money})")
    int add(@Param("name") String name, @Param("money") double money);

    @Update("update account set name = #{name}, money = #{money} where id = #{id}")
    int update(@Param("name") String name, @Param("money") double money, @Param("id") int  id);

    @Delete("delete from account where id = #{id}")
    int delete(int id);

    @Select("select id, name as name, money as money from account where id = #{id}")
    Account findAccount(@Param("id") int id);

    @Select("select id, name as name, money as money from account")
    List<Account> findAccountList();
}
			
	======================Mybatis事务（Mapper方式）==============================
	<dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.0</version>
	</dependency>

	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<scope>runtime</scope>
	</dependency>
	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>druid</artifactId>
		<version>1.0.29</version>
	</dependency>
		
		
	spring.datasource.url=jdbc:mysql://localhost:3306/test
	spring.datasource.username=root
	spring.datasource.password=123456
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	mybatis.mapper-locations=classpath*:mybatis/*Mapper.xml
	mybatis.type-aliases-package=com.forezp.entity


	通过配置mybatis.mapper-locations来指明mapper的xml文件存放位置，我是放在resources/mybatis文件下的。mybatis.type-aliases-package来指明和数据库映射的实体的所在包。

	经过以上步骤，springboot就可以通过mybatis访问数据库来。


	dao层
	public interface AccountMapper2 {
	   int update( @Param("money") double money, @Param("id") int  id);
	}
	
	mapper
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.forezp.dao.AccountMapper2">


	<update id="update">
		UPDATE account set money=#{money} WHERE id=#{id}
	</update>
	</mapper>

	
	@Service
	public class AccountService2 {

		@Autowired
		AccountMapper2 accountMapper2;

		@Transactional
		public void transfer() throws RuntimeException{
			accountMapper2.update(90,1);//用户1减10块 用户2加10块
			int i=1/0;
			accountMapper2.update(110,2);
		}
	}

	springboot 开启事物很简单，只需要加一行注解就可以了，前提你用的是jdbctemplate, jpa, mybatis，这种常见的orm。
			
		=========两个方式=======
	1：
	@Mapper
	public interface AccountMapper 
	2：
	mybatis.mapper-locations=classpath*:mybatis/*Mapper.xml
	mybatis.type-aliases-package=com.forezp.entity
	
	<mapper namespace="com.forezp.dao.AccountMapper2">

	
	

