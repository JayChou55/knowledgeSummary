同步
异步

并发
并行
Amdahl定律，加速比：优化前系统耗时/优化后系统耗时
Gstafson定律：处理器个数，串行比例和加速比之间关系，加速比和cpu数成正比


你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。
你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持并发。
你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持并行。
并发的关键是你有处理多个任务的能力，不一定要同时。
并行的关键是你有同时处理多个任务的能力。所以我认为它们最关键的点就是：是否是『同时』。

临界区：每个进程中访问临界资源的那段代码称为临界区（Critical Section）（临界资源是一次仅允许一个进程使用的共享资源）。每次只准许一个进程进入临界区，进入后不允许其他进程进入。

阻塞：一个线程占用临界区资源，其他资源线程必须等待，会导致资源挂起，这就是阻塞。
非阻塞：允许多个线程进入临界区

无等待：无锁，所有线程在限步内完成，无饥饿的
锁：
无锁：无障碍，保证一个线程胜出
饥饿：一个或多个线程因某些原因，无法获得所需要的资源，导致无法执行。
活锁：

并行的级别

原子性：操作不可中断，线程一启动，就不会被其他线程干扰。
有序性：


 关键字synchronized取得的锁都是对象锁，而不是把一段代码（方法）当做锁（就是说，2个对象的线程，访问同一个方法是没锁的），
 所以代码中哪个线程先执行synchronized关键字的方法，哪个线程就持有该方法所属对象的锁（Lock），
  在静态方法上加synchronized关键字，表示锁定.class类，类一级别的锁（独占.class类）。


