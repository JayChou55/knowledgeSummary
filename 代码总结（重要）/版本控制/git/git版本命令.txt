克隆dev分支内容 
git clone -b dev git@gitee.com:github-123456/pig-config.git

查看版本
git remote -v 

================================================分支=======================================
查看本地分支
git branch
查看远程分支
git branch -r
查看所有分支
git branch -a
新建xx分支
git branch xx
从已有的分支创建新的分支(如从master分支),创建一个dev分支
git checkout -b dev
查看远程与本地分支对应
git branch -vv
删除本地分支
git branch -d branchName //最后加上 -D 强制删除

=========================================提交=================================================
提交本地test分支作为远程的test分支，第一个test本地的，第二个远程的，如果远程没有对应分支会创建
$ git push origin test:test    
刚提交到远程的test将被删除，但是本地还会保存的，不用担心    
$ git push origin :test
切换主分支
git checkout master
清除暂存区（指定文件）
git rm -r --cached fileName或者file/

建立当前本地分支到上游（远端）仓的链接 --这样代码才能提交上去
git branch --set-upstream-to=origin/dev 
取消对master的跟踪
git branch --unset-upstream master

===============================切换分支会带着当前未提交内容到分支中===========
先add commit后在tm换分支！


//更新下来
git stash
git pull
git stash pop


git stash 可用来暂存当前正在进行的工作， 比如想pull 最新代码， 又不想加新commit， 或者另外一种情况，为了fix 一个紧急的bug,  先stash, 使返回到自己上一个commit, 改完bug之后再stash pop, 继续原来的工作。
基础命令：
$git stash
$do some work
$git stash pop


进阶：

git stash save "work in progress for foo feature"

当你多次使用’git stash’命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑，

’git stash list’ 命令可以将当前的Git栈信息打印出来，你只需要将找到对应的版本号，例如使用’git stash apply stash@{1}’就可以将你指定版本号为stash@{1}的工作取出来，当你将所有的栈都应用回来的时候，可以使用’git stash clear’来将栈清空。



git stash          # save uncommitted changes
# pull, edit, etc.
git stash list     # list stashed changes in this git
git show stash@{0} # see the last stash 
git stash pop      # apply last stash and remove it from the list

git stash --help   # for more info
